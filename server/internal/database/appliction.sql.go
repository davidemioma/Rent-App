// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: appliction.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getUserApplications = `-- name: GetUserApplications :many
SELECT 
    a.lease_id AS lease_id,
    a.name AS application_name,
    a.email AS application_email,
    a.phone_number AS application_phone_number,
    a.message AS application_message,
    a.status AS application_status,
    a.application_date AS application_application_date,
    p.id, p.name, p.description, p.price_per_month, p.security_deposit, p.application_fee, p.photo_urls, p.is_pets_allowed, p.is_parking_included, p.beds, p.baths, p.square_feet, p.property_type, p.average_rating, p.number_of_reviews, p.location_id, p.manager_id, p.created_at, p.updated_at,
    l.id AS property_location_id, 
    l.address AS location_address,
    l.city AS location_city,
    l.state AS location_state,
    l.country AS location_country,
    l.postal_code AS location_postal_code,
    m.id AS manager_user_id,
    m.cognito_id AS manager_cognito_id,
    m.name AS manager_name,
    m.email AS manager_email,
    m.phoneNumber AS manager_phoneNumber,
    t.id AS tenant_user_id,
    t.cognito_id AS tenant_cognito_id,
    t.name AS tenant_name,
    t.email AS tenant_email,
    t.phoneNumber AS tenant_phoneNumber
FROM application a
JOIN property p ON a.property_id = p.id
JOIN location l ON p.location_id = l.id
JOIN manager m ON p.manager_id = m.id
JOIN tenant t ON a.tenant_id = t.id
WHERE 
    (CAST($1 AS text) = 'manager' AND p.manager_id = $2)
    OR
    (CAST($1 AS text) = 'tenant' AND a.tenant_id = $2)
`

type GetUserApplicationsParams struct {
	Column1   string
	ManagerID uuid.UUID
}

type GetUserApplicationsRow struct {
	LeaseID                    uuid.NullUUID
	ApplicationName            string
	ApplicationEmail           string
	ApplicationPhoneNumber     string
	ApplicationMessage         sql.NullString
	ApplicationStatus          ApplicationStatus
	ApplicationApplicationDate time.Time
	ID                         uuid.UUID
	Name                       string
	Description                string
	PricePerMonth              string
	SecurityDeposit            string
	ApplicationFee             string
	PhotoUrls                  []string
	IsPetsAllowed              bool
	IsParkingIncluded          bool
	Beds                       int32
	Baths                      string
	SquareFeet                 int32
	PropertyType               PropertyType
	AverageRating              sql.NullString
	NumberOfReviews            sql.NullInt32
	LocationID                 uuid.UUID
	ManagerID                  uuid.UUID
	CreatedAt                  time.Time
	UpdatedAt                  time.Time
	PropertyLocationID         uuid.UUID
	LocationAddress            string
	LocationCity               string
	LocationState              string
	LocationCountry            string
	LocationPostalCode         string
	ManagerUserID              uuid.UUID
	ManagerCognitoID           string
	ManagerName                string
	ManagerEmail               string
	ManagerPhonenumber         string
	TenantUserID               uuid.UUID
	TenantCognitoID            string
	TenantName                 string
	TenantEmail                string
	TenantPhonenumber          string
}

func (q *Queries) GetUserApplications(ctx context.Context, arg GetUserApplicationsParams) ([]GetUserApplicationsRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserApplications, arg.Column1, arg.ManagerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserApplicationsRow
	for rows.Next() {
		var i GetUserApplicationsRow
		if err := rows.Scan(
			&i.LeaseID,
			&i.ApplicationName,
			&i.ApplicationEmail,
			&i.ApplicationPhoneNumber,
			&i.ApplicationMessage,
			&i.ApplicationStatus,
			&i.ApplicationApplicationDate,
			&i.ID,
			&i.Name,
			&i.Description,
			&i.PricePerMonth,
			&i.SecurityDeposit,
			&i.ApplicationFee,
			pq.Array(&i.PhotoUrls),
			&i.IsPetsAllowed,
			&i.IsParkingIncluded,
			&i.Beds,
			&i.Baths,
			&i.SquareFeet,
			&i.PropertyType,
			&i.AverageRating,
			&i.NumberOfReviews,
			&i.LocationID,
			&i.ManagerID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PropertyLocationID,
			&i.LocationAddress,
			&i.LocationCity,
			&i.LocationState,
			&i.LocationCountry,
			&i.LocationPostalCode,
			&i.ManagerUserID,
			&i.ManagerCognitoID,
			&i.ManagerName,
			&i.ManagerEmail,
			&i.ManagerPhonenumber,
			&i.TenantUserID,
			&i.TenantCognitoID,
			&i.TenantName,
			&i.TenantEmail,
			&i.TenantPhonenumber,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
