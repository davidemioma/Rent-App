// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createManager = `-- name: CreateManager :one
INSERT INTO manager (id, cognito_id, name, email, phoneNumber)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, cognito_id, name, email, phonenumber
`

type CreateManagerParams struct {
	ID          uuid.UUID
	CognitoID   string
	Name        string
	Email       string
	Phonenumber string
}

func (q *Queries) CreateManager(ctx context.Context, arg CreateManagerParams) (Manager, error) {
	row := q.db.QueryRowContext(ctx, createManager,
		arg.ID,
		arg.CognitoID,
		arg.Name,
		arg.Email,
		arg.Phonenumber,
	)
	var i Manager
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Name,
		&i.Email,
		&i.Phonenumber,
	)
	return i, err
}

const createTenant = `-- name: CreateTenant :one
INSERT INTO tenant (id, cognito_id, name, email, phoneNumber)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, cognito_id, name, email, phonenumber
`

type CreateTenantParams struct {
	ID          uuid.UUID
	CognitoID   string
	Name        string
	Email       string
	Phonenumber string
}

func (q *Queries) CreateTenant(ctx context.Context, arg CreateTenantParams) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, createTenant,
		arg.ID,
		arg.CognitoID,
		arg.Name,
		arg.Email,
		arg.Phonenumber,
	)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Name,
		&i.Email,
		&i.Phonenumber,
	)
	return i, err
}

const getManagerByCognitoId = `-- name: GetManagerByCognitoId :one
SELECT id, cognito_id, name, email, phonenumber FROM manager WHERE cognito_id = $1
`

func (q *Queries) GetManagerByCognitoId(ctx context.Context, cognitoID string) (Manager, error) {
	row := q.db.QueryRowContext(ctx, getManagerByCognitoId, cognitoID)
	var i Manager
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Name,
		&i.Email,
		&i.Phonenumber,
	)
	return i, err
}

const getTenantByCognitoId = `-- name: GetTenantByCognitoId :one
SELECT id, cognito_id, name, email, phonenumber FROM tenant WHERE cognito_id = $1
`

func (q *Queries) GetTenantByCognitoId(ctx context.Context, cognitoID string) (Tenant, error) {
	row := q.db.QueryRowContext(ctx, getTenantByCognitoId, cognitoID)
	var i Tenant
	err := row.Scan(
		&i.ID,
		&i.CognitoID,
		&i.Name,
		&i.Email,
		&i.Phonenumber,
	)
	return i, err
}

const updateManager = `-- name: UpdateManager :exec
UPDATE manager
SET 
    name = $1,
    phoneNumber = $2
WHERE cognito_id = $3
`

type UpdateManagerParams struct {
	Name        string
	Phonenumber string
	CognitoID   string
}

func (q *Queries) UpdateManager(ctx context.Context, arg UpdateManagerParams) error {
	_, err := q.db.ExecContext(ctx, updateManager, arg.Name, arg.Phonenumber, arg.CognitoID)
	return err
}

const updateTenant = `-- name: UpdateTenant :exec
UPDATE tenant
SET 
    name = $1,
    phoneNumber = $2
WHERE cognito_id = $3
`

type UpdateTenantParams struct {
	Name        string
	Phonenumber string
	CognitoID   string
}

func (q *Queries) UpdateTenant(ctx context.Context, arg UpdateTenantParams) error {
	_, err := q.db.ExecContext(ctx, updateTenant, arg.Name, arg.Phonenumber, arg.CognitoID)
	return err
}
