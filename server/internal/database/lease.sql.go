// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: lease.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createLease = `-- name: CreateLease :exec
INSERT INTO lease (id, property_id, tenant_id, rent, deposit, start_date, end_date)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateLeaseParams struct {
	ID         uuid.UUID
	PropertyID uuid.UUID
	TenantID   uuid.UUID
	Rent       string
	Deposit    string
	StartDate  time.Time
	EndDate    time.Time
}

func (q *Queries) CreateLease(ctx context.Context, arg CreateLeaseParams) error {
	_, err := q.db.ExecContext(ctx, createLease,
		arg.ID,
		arg.PropertyID,
		arg.TenantID,
		arg.Rent,
		arg.Deposit,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const createPayment = `-- name: CreatePayment :exec
INSERT INTO payment (id, lease_id, amount_due, amount_paid, due_date, payment_date, payment_status)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreatePaymentParams struct {
	ID            uuid.UUID
	LeaseID       uuid.UUID
	AmountDue     string
	AmountPaid    string
	DueDate       time.Time
	PaymentDate   time.Time
	PaymentStatus PaymentStatus
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, createPayment,
		arg.ID,
		arg.LeaseID,
		arg.AmountDue,
		arg.AmountPaid,
		arg.DueDate,
		arg.PaymentDate,
		arg.PaymentStatus,
	)
	return err
}

const getLeasePayments = `-- name: GetLeasePayments :many
SELECT id, lease_id, amount_due, amount_paid, due_date, payment_date, payment_status
FROM payment 
WHERE lease_id = $1
`

func (q *Queries) GetLeasePayments(ctx context.Context, leaseID uuid.UUID) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getLeasePayments, leaseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.LeaseID,
			&i.AmountDue,
			&i.AmountPaid,
			&i.DueDate,
			&i.PaymentDate,
			&i.PaymentStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPropertyLeases = `-- name: GetPropertyLeases :many
SELECT l.id, l.property_id, l.tenant_id, l.rent, l.deposit, l.start_date, l.end_date, p.id, p.name, p.description, p.price_per_month, p.security_deposit, p.application_fee, p.photo_urls, p.is_pets_allowed, p.is_parking_included, p.beds, p.baths, p.square_feet, p.property_type, p.average_rating, p.number_of_reviews, p.location_id, p.manager_id, p.created_at, p.updated_at
FROM lease l
JOIN property p ON l.property_id = p.id
`

type GetPropertyLeasesRow struct {
	ID                uuid.UUID
	PropertyID        uuid.UUID
	TenantID          uuid.UUID
	Rent              string
	Deposit           string
	StartDate         time.Time
	EndDate           time.Time
	ID_2              uuid.UUID
	Name              string
	Description       string
	PricePerMonth     string
	SecurityDeposit   string
	ApplicationFee    string
	PhotoUrls         []string
	IsPetsAllowed     bool
	IsParkingIncluded bool
	Beds              int32
	Baths             string
	SquareFeet        int32
	PropertyType      PropertyType
	AverageRating     sql.NullString
	NumberOfReviews   sql.NullInt32
	LocationID        uuid.UUID
	ManagerID         uuid.UUID
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

func (q *Queries) GetPropertyLeases(ctx context.Context) ([]GetPropertyLeasesRow, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyLeases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPropertyLeasesRow
	for rows.Next() {
		var i GetPropertyLeasesRow
		if err := rows.Scan(
			&i.ID,
			&i.PropertyID,
			&i.TenantID,
			&i.Rent,
			&i.Deposit,
			&i.StartDate,
			&i.EndDate,
			&i.ID_2,
			&i.Name,
			&i.Description,
			&i.PricePerMonth,
			&i.SecurityDeposit,
			&i.ApplicationFee,
			pq.Array(&i.PhotoUrls),
			&i.IsPetsAllowed,
			&i.IsParkingIncluded,
			&i.Beds,
			&i.Baths,
			&i.SquareFeet,
			&i.PropertyType,
			&i.AverageRating,
			&i.NumberOfReviews,
			&i.LocationID,
			&i.ManagerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
