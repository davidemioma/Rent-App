// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorite.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const addFavourite = `-- name: AddFavourite :exec
INSERT INTO favorite (id, property_id, tenant_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5)
`

type AddFavouriteParams struct {
	ID         uuid.UUID
	PropertyID uuid.UUID
	TenantID   uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) AddFavourite(ctx context.Context, arg AddFavouriteParams) error {
	_, err := q.db.ExecContext(ctx, addFavourite,
		arg.ID,
		arg.PropertyID,
		arg.TenantID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getFavourite = `-- name: GetFavourite :one
SELECT id, property_id, tenant_id, created_at, updated_at FROM favorite WHERE property_id = $1 AND tenant_id = $2
`

type GetFavouriteParams struct {
	PropertyID uuid.UUID
	TenantID   uuid.UUID
}

func (q *Queries) GetFavourite(ctx context.Context, arg GetFavouriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getFavourite, arg.PropertyID, arg.TenantID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.PropertyID,
		&i.TenantID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFavouriteProperties = `-- name: GetFavouriteProperties :many
SELECT 
  json_build_object(
    'id', f.id,
    'propertyId', f.property_id,
    'tenantId', f.tenant_id,
    'property', json_build_object(
      'id', p.id,
      'name', p.name,
      'description', p.description,
      'price_per_month', p.price_per_month,
      'security_deposit', p.security_deposit,
      'application_fee', p.application_fee,
      'photo_urls', p.photo_urls,
      'is_pets_allowed', p.is_pets_allowed,
      'is_parking_included', p.is_parking_included,
      'beds', p.beds,
      'baths', p.baths,
      'square_feet', p.square_feet,
      'property_type', p.property_type,
      'average_rating', p.average_rating,
      'number_of_reviews', p.number_of_reviews,
      'created_at', p.created_at,
      'updated_at', p.updated_at,
      'location', json_build_object(
        'id', loc.id,
        'address', loc.address,
        'city', loc.city,
        'state', loc.state,
        'country', loc.country,
        'postal_code', loc.postal_code,
        'coordinates', json_build_object(
          'longitude', ST_X(loc.coordinates::geometry),
          'latitude', ST_Y(loc.coordinates::geometry)
        )
      )
    )
  ) AS property_data
FROM favorite f
JOIN property p ON f.property_id = p.id
JOIN location loc ON p.location_id = loc.id
WHERE f.tenant_id = $1
`

func (q *Queries) GetFavouriteProperties(ctx context.Context, tenantID uuid.UUID) ([]json.RawMessage, error) {
	rows, err := q.db.QueryContext(ctx, getFavouriteProperties, tenantID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []json.RawMessage
	for rows.Next() {
		var property_data json.RawMessage
		if err := rows.Scan(&property_data); err != nil {
			return nil, err
		}
		items = append(items, property_data)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFavourite = `-- name: RemoveFavourite :exec
DELETE FROM favorite WHERE id = $1 AND tenant_id = $2
`

type RemoveFavouriteParams struct {
	ID       uuid.UUID
	TenantID uuid.UUID
}

func (q *Queries) RemoveFavourite(ctx context.Context, arg RemoveFavouriteParams) error {
	_, err := q.db.ExecContext(ctx, removeFavourite, arg.ID, arg.TenantID)
	return err
}
