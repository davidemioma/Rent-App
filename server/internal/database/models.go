// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type ApplicationStatus string

const (
	ApplicationStatusPENDING  ApplicationStatus = "PENDING"
	ApplicationStatusDENIED   ApplicationStatus = "DENIED"
	ApplicationStatusAPPROVED ApplicationStatus = "APPROVED"
)

func (e *ApplicationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ApplicationStatus(s)
	case string:
		*e = ApplicationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ApplicationStatus: %T", src)
	}
	return nil
}

type NullApplicationStatus struct {
	ApplicationStatus ApplicationStatus
	Valid             bool // Valid is true if ApplicationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullApplicationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ApplicationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ApplicationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullApplicationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ApplicationStatus), nil
}

type PaymentStatus string

const (
	PaymentStatusPENDING      PaymentStatus = "PENDING"
	PaymentStatusPAID         PaymentStatus = "PAID"
	PaymentStatusPARTILLYPAID PaymentStatus = "PARTILLYPAID"
	PaymentStatusOVERDUE      PaymentStatus = "OVERDUE"
)

func (e *PaymentStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PaymentStatus(s)
	case string:
		*e = PaymentStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for PaymentStatus: %T", src)
	}
	return nil
}

type NullPaymentStatus struct {
	PaymentStatus PaymentStatus
	Valid         bool // Valid is true if PaymentStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPaymentStatus) Scan(value interface{}) error {
	if value == nil {
		ns.PaymentStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PaymentStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPaymentStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PaymentStatus), nil
}

type PropertyType string

const (
	PropertyTypeROOMS     PropertyType = "ROOMS"
	PropertyTypeTINYHOUSE PropertyType = "TINYHOUSE"
	PropertyTypeAPARTMENT PropertyType = "APARTMENT"
	PropertyTypeVILLA     PropertyType = "VILLA"
	PropertyTypeTOWNHOUSE PropertyType = "TOWNHOUSE"
	PropertyTypeCOTTAGE   PropertyType = "COTTAGE"
)

func (e *PropertyType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PropertyType(s)
	case string:
		*e = PropertyType(s)
	default:
		return fmt.Errorf("unsupported scan type for PropertyType: %T", src)
	}
	return nil
}

type NullPropertyType struct {
	PropertyType PropertyType
	Valid        bool // Valid is true if PropertyType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPropertyType) Scan(value interface{}) error {
	if value == nil {
		ns.PropertyType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PropertyType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPropertyType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PropertyType), nil
}

type Application struct {
	ID              uuid.UUID
	PropertyID      uuid.UUID
	TenantID        uuid.UUID
	LeaseID         uuid.NullUUID
	Name            string
	Email           string
	PhoneNumber     string
	Message         sql.NullString
	Status          ApplicationStatus
	ApplicationDate time.Time
}

type Favorite struct {
	ID         uuid.UUID
	PropertyID uuid.UUID
	TenantID   uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

type Lease struct {
	ID         uuid.UUID
	PropertyID uuid.UUID
	TenantID   uuid.UUID
	Rent       string
	Deposit    string
	StartDate  time.Time
	EndDate    time.Time
}

type Location struct {
	ID          uuid.UUID
	Address     string
	City        string
	State       string
	Country     string
	PostalCode  string
	Coordinates interface{}
}

type Manager struct {
	ID          uuid.UUID
	CognitoID   string
	Name        string
	Email       string
	Phonenumber string
}

type Payment struct {
	ID            uuid.UUID
	LeaseID       uuid.UUID
	AmountDue     string
	AmountPaid    string
	DueDate       time.Time
	PaymentDate   time.Time
	PaymentStatus PaymentStatus
}

type Property struct {
	ID                uuid.UUID
	Name              string
	Description       string
	PricePerMonth     string
	SecurityDeposit   string
	ApplicationFee    string
	PhotoUrls         []string
	IsPetsAllowed     bool
	IsParkingIncluded bool
	Beds              int32
	Baths             string
	SquareFeet        int32
	PropertyType      PropertyType
	AverageRating     sql.NullString
	NumberOfReviews   sql.NullInt32
	LocationID        uuid.UUID
	ManagerID         uuid.UUID
	TenantID          uuid.NullUUID
	CreatedAt         time.Time
	UpdatedAt         time.Time
}

type Tenant struct {
	ID          uuid.UUID
	CognitoID   string
	Name        string
	Email       string
	Phonenumber string
}
